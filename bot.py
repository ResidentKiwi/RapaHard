from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
import random
import os

# Fun칞칚o para /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user.first_name
    await update.message.reply_text("ping! 游끱" \n "o bot est치 em funcionamento!")

# Fun칞칚o para /help
async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("""
Comandos dispon칤veis:
/start - Inicia o bot
/help - Lista os comandos dispon칤veis
/poema - Gera um poema aleat칩rio
    """)

# Fun칞칚o principal do comando /poema
async def poema(update: Update, context: ContextTypes.DEFAULT_TYPE):
    poemas = [
        "Nas sombras do cosmos, a eternidade passa,\nA solid칚o ecoa, mas o esp칤rito n칚o fracassa.",
        "Os mundos giram como hist칩rias sem fim,\nCada estrela, um novo come칞o para mim.",
        "Ao c칠u escuro dou meu olhar,\nProcurando reden칞칚o onde o amor possa estar.",
        "Caminhei por terras que o tempo esqueceu,\nAinda buscando algo que sempre foi meu."
    ]
    poema_escolhido = random.choice(poemas)
    await update.message.reply_text(f"Eis seu poema:\n\n{poema_escolhido}")

# Fun칞칚o principal para inicializar o bot
def main():
    token = os.getenv("TELEGRAM_BOT_TOKEN")  # O token vem das vari치veis de ambiente
    if not token:
        raise RuntimeError("O token do bot n칚o foi configurado corretamente.")

    application = ApplicationBuilder().token(token).build()

    # Handlers dos comandos
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("poema", poema))

    # Roda o bot
    print("Bot est치 rodando...")
    application.run_polling()  # N츾O precisa ser await ou estar dentro de asyncio.run()

if __name__ == "__main__":
    main()
